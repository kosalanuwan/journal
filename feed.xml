<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://kosalanuwan.github.io/journal/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kosalanuwan.github.io/journal/" rel="alternate" type="text/html" /><updated>2021-07-09T14:19:25+00:00</updated><id>https://kosalanuwan.github.io/journal/feed.xml</id><title type="html">journal</title><subtitle>@kosalanuwan's journal entries. I blog about tech, code, culture, and above all, the open web. The design and the source for this site are not publicly available.</subtitle><entry><title type="html">Writing a Lodash-like JS utility belt library</title><link href="https://kosalanuwan.github.io/journal/javascript/lodash-utility-belt-library/" rel="alternate" type="text/html" title="Writing a Lodash-like JS utility belt library" /><published>2016-11-05T00:00:00+00:00</published><updated>2016-11-05T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/javascript/lodash-utility-belt-library</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/javascript/lodash-utility-belt-library/">&lt;p&gt;I prefer having my own JS utility belt library like they do it on Lodash and Underscore.js, say, a stripped-down version of it, then bundled together into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global&lt;/code&gt; namespace as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example &lt;sup&gt;1&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Use as typical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; utility functions&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello {0}!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kebabCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Some teXt to Kebab case&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isblank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example &lt;sup&gt;2&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Or, do the same with mixin and prototype option&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello {0}!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Some teXt to Kebab case&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toKebabCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isblank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing we’re going to need is a few utility libraries. Fortunately, GitHub has plenty of &lt;a href=&quot;https://github.com/topics/utilities?l=javascript&amp;amp;o=desc&amp;amp;s=stars&quot;&gt;opensourced utility libraries&lt;/a&gt;. &lt;a href=&quot;https://github.com/lodash/lodash&quot;&gt;Lodash&lt;/a&gt;, &lt;a href=&quot;https://github.com/jashkenas/underscore&quot;&gt;Underscore.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular.js/&quot;&gt;Angular.js&lt;/a&gt; code arn’t difficult to understand as &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; code. So, I can run a search in the repo and it’ll return all of the code snippets and function definitions. Then I can break out the scripts in individual JS files that are in and save them as my own utility belt library. All I need is a little &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; magic with a &lt;a href=&quot;https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch13s15.html&quot;&gt;namespace&lt;/a&gt;, say, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; and we’re set. Moving right along.&lt;/p&gt;

&lt;p&gt;Next is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Mixin&quot;&gt;Mixin&lt;/a&gt;. You can run all the scripts in a namespace and is slightly obnoxious if not available as part of the browser API or native JS object too. You’d be amazed how intense it is to enable both namespace and prototype options. Not only this require a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closure pattern&lt;/a&gt;, but you also have to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Emulating_private_methods_with_closures&quot;&gt;emulate methods&lt;/a&gt;. &lt;a href=&quot;https://github.com/esamattis/underscore.string/blob/master/index.js#L105-L140&quot;&gt;@esamattis/underscore.string&lt;/a&gt; has mixin for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; types. So I’m gonna go ahead and break out that same script and modify my utility script. Excellent.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kosalanuwan/vanilla-js-snippets/#readme&quot;&gt;Here’s the complete source code&lt;/a&gt; I pulled together as my own utility belt nano-library.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Ferdinandi, C. (2019). &lt;a href=&quot;https://gomakethings.com/why-do-people-choose-frameworks-over-vanilla-js/&quot;&gt;Why do people choose frameworks over vanilla javascript?&lt;/a&gt; [Blog] &lt;em&gt;Go make things&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;All things javascript, LLC. (2020, Jan 23). &lt;a href=&quot;https://www.youtube.com/playlist?list=PLTo9PCskHpbGaCR6vjk1q4ohcEm8cBtzN&quot;&gt;&lt;em&gt;Javascript prototypes&lt;/em&gt;&lt;/a&gt; [Video playlist].&lt;/li&gt;
  &lt;li&gt;Osmani, A. (2012). &lt;a href=&quot;https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch13s15.html&quot;&gt;“Javascript namespace fundamentals” in &lt;em&gt;Learning javascript design patterns&lt;/em&gt;&lt;/a&gt;. O’Reilly, ch. 13.&lt;/li&gt;
  &lt;li&gt;Chaudhary, V. (2016). &lt;a href=&quot;https://www.dotnetforall.com/namespace-scoping-javascript/&quot;&gt;Learning javascript namspaces and scoping&lt;/a&gt; [Blog] &lt;em&gt;Dot net for all&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Ferdinandi, C. (no date). &lt;a href=&quot;https://leanweb.dev/ebook/lean-web-principles/&quot;&gt;&lt;em&gt;Lean Web Principles - The new best practices for simpler, faster websites&lt;/em&gt;&lt;/a&gt; [E-book]. The lean web.&lt;/li&gt;
  &lt;li&gt;DevDelight. (2019, Aug 9). &lt;a href=&quot;https://www.youtube.com/watch?v=_VB5hrB5CsI&quot;&gt;&lt;em&gt;Javascript style guide for beginners&lt;/em&gt;&lt;/a&gt; [Video].&lt;/li&gt;
  &lt;li&gt;Mazzarri, M. (2014). &lt;a href=&quot;https://milmazz.uno/article/2014/08/27/how-to-document-your-javascript-code/&quot;&gt;How to document your javascript code&lt;/a&gt; [Blog] &lt;em&gt;Milmazz blog&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Traversy Media. (2019). &lt;a href=&quot;https://www.youtube.com/watch?v=YK-GurROGIg&quot;&gt;&lt;em&gt;Documenting your javascript with JSDoc - Crash course&lt;/em&gt;&lt;/a&gt; [Video].&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="javascript" /></entry><entry><title type="html">Stripping out console logs in production</title><link href="https://kosalanuwan.github.io/journal/javascript/strip-out-console-log/" rel="alternate" type="text/html" title="Stripping out console logs in production" /><published>2016-02-10T00:00:00+00:00</published><updated>2016-02-10T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/javascript/strip-out-console-log</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/javascript/strip-out-console-log/">&lt;p&gt;Troubleshooting JavaScript is intense. The truth is, I’m getting all kinds of help from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; methods and I need to do something to strip out all that in production. Easy enuf, except I have a few dozens of JS files and there’s no way I’m going to go thru each one at a time before every production release. So it’s definitely necessary to break out that build pipeline and add some magic code.&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example &lt;sup&gt;1&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Overriding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; methods with a nullo&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First up is &lt;a href=&quot;https://www.habilelabs.io/handling-nulls-in-javascript-using-null-object-design-pattern/&quot;&gt;Null Object pattern&lt;/a&gt;. JS keep everything weakly typed and dynamic so a little &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noop&lt;/code&gt; magic script is all that’s necessary to override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; methods. I’m not going to lie, you’d be amazed how tricky it is to bundle everything together. Not only you have to preppend it to the rest of the JS, but you also have to do it conditionally. I’m gonna go ahead and say it requires a gulp task with a few plugins, so there’s no need of hardcoding a flag on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noop&lt;/code&gt; script for detecting the environment. This may be obnoxious.&lt;/p&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example &lt;sup&gt;2&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Using gulp to strip out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; methods&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp build &lt;span class=&quot;nt&quot;&gt;--no-debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stripping out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; methods is a little better. This still makes you write gulp tasks, but it gives the whole thing a very &lt;em&gt;Minimalistic&lt;/em&gt; feel since there’s no need to prepend any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noop&lt;/code&gt; scripts. The first thing we’re going to need is a gulp task to strip out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; methods and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert&lt;/code&gt; statements. Fortunately, there’s a plugin for this so a little &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp-strip-debug&lt;/code&gt; magic is all that’s necessary to clean up the entire JS bundle. I can run the build pipeline with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-debug&lt;/code&gt; option like they do it in command-line tools, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yargs&lt;/code&gt; will parse options for me. And I can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp-if&lt;/code&gt; to strip out conditionally. Excellent.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kosalanuwan/vanilla-js-snippets/#readme&quot;&gt;Here’s the complete source code&lt;/a&gt; I pulled together for my own sanity.&lt;/p&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;Stapp, P. (2016, Jan 12). &lt;a href=&quot;https://stapp.space/disable-javascript-console-on-production/&quot;&gt;Disable JS console on production&lt;/a&gt; [Blog] &lt;em&gt;Reset your code&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Boroumand A. (2017, Jul 7). &lt;a href=&quot;https://www.codebyamir.com/blog/suppressing-console-log-messages-in-production&quot;&gt;Suppressing console.log() messages in production&lt;/a&gt; [Blog] &lt;em&gt;Code by Amir&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Cunha, C. (2014, Apr 13). &lt;a href=&quot;https://stackoverflow.com/a/23038290/257727&quot;&gt;Is it possible to pass a flag to Gulp to have it run tasks in different ways? answer #23038290.&lt;/a&gt; [Forum post]. &lt;em&gt;Stack Overflow&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="javascript" /></entry><entry><title type="html">Personal productivity</title><link href="https://kosalanuwan.github.io/journal/personal-notes/personal-productivity/" rel="alternate" type="text/html" title="Personal productivity" /><published>2015-11-05T00:00:00+00:00</published><updated>2015-11-05T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/personal-notes/personal-productivity</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/personal-notes/personal-productivity/">&lt;p&gt;Here’s my &lt;em&gt;deliberate efforts&lt;/em&gt; to keep dancing. These tools and apps are my personal preference and probably might work for you as well. Not going to lie, I may have literally let go of some of these for the preference of my employers and clientele.&lt;/p&gt;

&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Notes&lt;/a&gt; written in markdown using &lt;a href=&quot;https://&quot;&gt;Paper app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#task-tracking&quot;&gt;Task tracking&lt;/a&gt; using &lt;a href=&quot;https://github.com/kosalanuwan&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#todo-list&quot;&gt;Todo list&lt;/a&gt; of &lt;em&gt;ahaa moments&lt;/em&gt; using &lt;a href=&quot;https://&quot;&gt;GitHub app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reminders&quot;&gt;Reminders&lt;/a&gt; are always on a calendar&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#emails&quot;&gt;Emails&lt;/a&gt; are filtered using &lt;a href=&quot;https://&quot;&gt;Outlook rules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reading&quot;&gt;Reading&lt;/a&gt; as in books are only on &lt;a href=&quot;https://&quot;&gt;Audible app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#budgets&quot;&gt;Budgets&lt;/a&gt; are planned monthly using &lt;a href=&quot;https://&quot;&gt;Google Keep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kosalanuwan.github.io/journal/hello-world/&quot;&gt;Written in markdown using Paper app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously used OneNote, Evernote, Workflowy, Dropbox Paper, and even Notion.&lt;/p&gt;

&lt;h3 id=&quot;task-tracking&quot;&gt;Task tracking&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;GitHub Issues&lt;/a&gt; for task and bug tracking&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Milestones&lt;/a&gt; for road maps and sprint planning, and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Labels&lt;/a&gt; to categorize based on features, bugs, and whatnot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is to keep a track of todos on various projects. Not meant to plan my daily routines. Previously used Trello, Todoist, and even Asana.&lt;/p&gt;

&lt;h3 id=&quot;todo-list&quot;&gt;Todo list&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;:lock: &lt;a href=&quot;https://github.com/kosalanuwan/todo-list/#readme&quot;&gt;Todos repository on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;GitHub Issues&lt;/a&gt; for each todo item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems like a pretty fantastic idea in lieu of traditional Trello, Todoist, Microsoft Todo, Google Keep, and the like. You want to try out &lt;a href=&quot;https://&quot;&gt;GitHub app on the mobile&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reminders&quot;&gt;Reminders&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://calendar.google.com&quot;&gt;Google Calendar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously tried Workflowy, Microsoft Todo, Trello, but it has always been a &lt;em&gt;calendar&lt;/em&gt; when scheduling meetings, appointments, reminders et al. whether it’s personal or work.&lt;/p&gt;

&lt;h3 id=&quot;emails&quot;&gt;Emails&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Microsoft Outlook Rules&lt;/a&gt; to filter and process emails and meeting invites&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You want to have a look at &lt;a href=&quot;https://www.hanselman.com/blog/TheThreeMostImportantOutlookRulesForProcessingMail.aspx&quot;&gt;Scott Hanselman’s article on Outlook rules for processing emails&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reading&quot;&gt;Reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Audio books purchased from &lt;a href=&quot;http://&quot;&gt;Audible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Listens using &lt;a href=&quot;https://&quot;&gt;Audible app&lt;/a&gt; while on the go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Credit goes to former colleague and a dear friend, &lt;a href=&quot;https://github.com/hasith&quot;&gt;@hasith&lt;/a&gt;, for showing how to keep up using Audible. I’m a snail-paced reader, still reads a chapter or two occasionally &lt;a href=&quot;/books/&quot;&gt;to get inspiration for fiction writing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;budgets&quot;&gt;Budgets&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Google Keep&lt;/a&gt; as a simple list of expenses with the budgeted amount&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously tried many apps and even spreadsheets but that doesn’t seemed to work consistently for not more than a few months.&lt;/p&gt;</content><author><name></name></author><category term="personal-notes" /></entry><entry><title type="html">Writing a jQuery-like DOM manipulation library</title><link href="https://kosalanuwan.github.io/journal/javascript/jquery-dom-manipulation-library/" rel="alternate" type="text/html" title="Writing a jQuery-like DOM manipulation library" /><published>2012-02-14T00:00:00+00:00</published><updated>2012-02-14T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/javascript/jquery-dom-manipulation-library</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/javascript/jquery-dom-manipulation-library/">&lt;p&gt;I’d prefer to write my own code for DOM manipulation. Think of it as a stripped-down version of JS libraries like jQuery. I’m not going to write yet another jQuery library but I like the idea of having my own logic to manipulate the DOM, say, a mix and match of native browser API calls.&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example &lt;sup&gt;1&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Wire a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; event to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showContentIfRouteLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example &lt;sup&gt;2&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Or, do the same with chaining and prototype option&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showContentIfRouteLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing we’re going to need is a lot of digging into &lt;a href=&quot;https://github.com/topics/utilities?l=javascript&amp;amp;o=desc&amp;amp;s=stars&quot;&gt;jQuery-like utility libraries&lt;/a&gt;. Fortunately, all of them are opensourced in GitHub so I’m going to have to get all the pieces from individual repos that are in.&lt;/p&gt;

&lt;p&gt;First up is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE pattern&lt;/a&gt;. It encapsulates all my code and runs as soon as it is defined. So a little anonymous function magic code is all that is necessary to get started. Kids’ stuff.&lt;/p&gt;

&lt;p&gt;Next is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;Polyfill pattern&lt;/a&gt;. I can define all the DOM manipulation script required but the browser will pick them up if not natively supported. &lt;a href=&quot;https://github.com/Financial-Times/polyfill-library&quot;&gt;@Financial-Times/polyfill-library&lt;/a&gt; has plenty of polyfill code snippets. Moving right along.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;Chaining is a bit tricky&lt;/a&gt;. Not only it requires a Prototype pattern, but you also have to search the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&quot;&gt;native DOM elements&lt;/a&gt; too. There’s no way I’m going to go thru 100s of elements to bind the script one element at a time. So it’s definitely necessary to break out helper functions and modify that to bind in interface or abstract level. I’m not going to lie, you’d be amazed how difficult it is to find the pieces and if you bind the script to the wrong element, nothing works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kosalanuwan/vanilla-js-snippets/#readme&quot;&gt;Here’s the complete source code&lt;/a&gt; I pulled together as my own nano-library for DOM manipulation.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Ferdinandi, C. (2019). &lt;a href=&quot;https://gomakethings.com/why-do-people-choose-frameworks-over-vanilla-js/&quot;&gt;Why do people choose frameworks over vanilla javascript?&lt;/a&gt; [Blog] &lt;em&gt;Go make things&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;All things javascript, LLC. (2017). &lt;a href=&quot;https://www.youtube.com/watch?v=f-yLYjvPiLE&quot;&gt;&lt;em&gt;Selecting DOM elements with pure javascript&lt;/em&gt;&lt;/a&gt; [Video].&lt;/li&gt;
  &lt;li&gt;Ferdinandi, C. (2017). &lt;a href=&quot;https://gomakethings.com/how-to-show-and-hide-elements-with-vanilla-javascript/&quot;&gt;How to show and hide elements with vanilla javascript&lt;/a&gt; [Blog] &lt;em&gt;Go make things&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;All things javascript, LLC. (2020, Jan 23). &lt;a href=&quot;https://www.youtube.com/playlist?list=PLTo9PCskHpbGaCR6vjk1q4ohcEm8cBtzN&quot;&gt;&lt;em&gt;Javascript prototypes&lt;/em&gt;&lt;/a&gt; [Video playlist].&lt;/li&gt;
  &lt;li&gt;Osmani, A. (2012). &lt;a href=&quot;https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch13s15.html&quot;&gt;“Javascript namespace fundamentals” in &lt;em&gt;Learning javascript design patterns&lt;/em&gt;&lt;/a&gt;. O’Reilly, ch. 13.&lt;/li&gt;
  &lt;li&gt;Chaudhary, V. (2016). &lt;a href=&quot;https://www.dotnetforall.com/namespace-scoping-javascript/&quot;&gt;Learning javascript namspaces and scoping&lt;/a&gt; [Blog] &lt;em&gt;Dot net for all&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Ferdinandi, C. (no date). &lt;a href=&quot;https://leanweb.dev/ebook/lean-web-principles/&quot;&gt;&lt;em&gt;Lean Web Principles - The new best practices for simpler, faster websites&lt;/em&gt;&lt;/a&gt; [E-book]. The lean web.&lt;/li&gt;
  &lt;li&gt;DevDelight. (2019, Aug 9). &lt;a href=&quot;https://www.youtube.com/watch?v=_VB5hrB5CsI&quot;&gt;&lt;em&gt;Javascript style guide for beginners&lt;/em&gt;&lt;/a&gt; [Video].&lt;/li&gt;
  &lt;li&gt;@30-seconds. (2018). &lt;a href=&quot;https://github.com/30-seconds/30-seconds-of-code&quot;&gt;&lt;em&gt;30 seconds of code - javascript snippets&lt;/em&gt;&lt;/a&gt; [Repo].&lt;/li&gt;
  &lt;li&gt;Mazzarri, M. (2014). &lt;a href=&quot;https://milmazz.uno/article/2014/08/27/how-to-document-your-javascript-code/&quot;&gt;How to document your javascript code&lt;/a&gt; [Blog] &lt;em&gt;Milmazz blog&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Traversy Media. (2019). &lt;a href=&quot;https://www.youtube.com/watch?v=YK-GurROGIg&quot;&gt;&lt;em&gt;Documenting your javascript with JSDoc - Crash course&lt;/em&gt;&lt;/a&gt; [Video].&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="javascript" /></entry><entry><title type="html">Writing vanilla JS snippets and examples</title><link href="https://kosalanuwan.github.io/journal/javascript/vanilla-js-snippets/" rel="alternate" type="text/html" title="Writing vanilla JS snippets and examples" /><published>2012-02-10T00:00:00+00:00</published><updated>2012-02-10T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/javascript/vanilla-js-snippets</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/javascript/vanilla-js-snippets/">&lt;p&gt;JavaScript is obnoxious! Do you think that’s because it is based on miserably failed languages - &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;Scheme&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Self_(programming_language)&quot;&gt;Self&lt;/a&gt; - at that time, or do you think it’s because Netscape did not give enuf time for Eich to design, implement, and ship JavaScript? For the record, you can make things work with absolutely no idea of what you are doing in JavaScript.&lt;/p&gt;

&lt;p&gt;The truth is, I’m getting all kinds of help from our friends at JS and VS Code community and &lt;a href=&quot;https://github.com/kosalanuwan/vanilla-js-snippets/#readme&quot;&gt;I need a library of helper functions and boilerplate code written with vanilla JS&lt;/a&gt;. Easy enuf, except I need a playground without having to install &lt;a href=&quot;https://github.com/nvm-sh/nvm#installing-and-updating&quot;&gt;NVM and Node.js&lt;/a&gt; like they do on &lt;a href=&quot;https://codepen.io/&quot;&gt;Codepen&lt;/a&gt;. It gives the whole thing a very &lt;em&gt;Control Freakery&lt;/em&gt; feel since the development environment will be more implicit than, say, adhering to frameworks and tools to build and run from source.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/958227/103410858-57c90680-4b93-11eb-977c-2428ec914857.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/958227/103410858-57c90680-4b93-11eb-977c-2428ec914857.png&quot; alt=&quot;JS snippets in action&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we’re going to need is a &lt;a href=&quot;https://brave.com/download/&quot;&gt;modern web browser&lt;/a&gt; that ship with Developer Tools. I can use the &lt;a href=&quot;https://www.youtube.com/watch?v=mzrP9AZvhpw&quot;&gt;Snippets&lt;/a&gt; and the &lt;a href=&quot;https://www.youtube.com/watch?v=NCbpA4dFB58&quot;&gt;Console&lt;/a&gt; for coding and debugging so a little copy paste magic is all that is necessary to get started with vanilla JS. Kids’ stuff.&lt;/p&gt;

&lt;p&gt;Next is a free web host running locally. I’m not gonna lie, you’d be amazed how tricky it is to pick a node-based web server. Not only are there many frameworks like &lt;a href=&quot;https://github.com/fastify/fastify/#readme&quot;&gt;Fastify&lt;/a&gt;, but there are node modules with VS Code extensions like &lt;a href=&quot;https://www.youtube.com/watch?v=mzrP9AZvhpw&quot;&gt;Live Server&lt;/a&gt;. There’s no way I’m going to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init fastify&lt;/code&gt; boilerplate code one at a time. So, it’s definitely necessary to break out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.devcontainer.json&lt;/code&gt; and add the live server extension. Then I can create JS snippets with example static sites and the live server will preview on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; for me. Excellent.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kosalanuwan/vanilla-js-snippets/#readme&quot;&gt;Here’s the library of vanilla JS snippets and examples&lt;/a&gt; I pulled together so far.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Huges, D. (2014). &lt;a href=&quot;https://www.youtube.com/playlist?list=PL62E185BB8577B63D&quot;&gt;&lt;em&gt;Douglas Crockford Lectures on JavaScript&lt;/em&gt;&lt;/a&gt; [Video playlist].&lt;/li&gt;
  &lt;li&gt;Fog City Learning. (2017). &lt;a href=&quot;https://www.youtube.com/playlist?list=PLkinLw-1_vNmcddfq8DIeVl9YKI7bLnOb&quot;&gt;&lt;em&gt;DevTools Basics: Chrome Developer Tools Tutorial&lt;/em&gt;&lt;/a&gt; [Video playlist].&lt;/li&gt;
  &lt;li&gt;Codes, J. (2020). &lt;a href=&quot;https://www.youtube.com/watch?v=y4qqQeUDCBQ&quot;&gt;&lt;em&gt;How to set up Live Server and browser auto refresh in VS Code&lt;/em&gt;&lt;/a&gt; [Video].&lt;/li&gt;
  &lt;li&gt;Mutunhire, T. (2018). &lt;a href=&quot;https://stackabuse.com/how-to-start-a-node-server-examples-with-the-most-popular-frameworks/&quot;&gt;How to start a node server: examples with the most popular frameworks&lt;/a&gt; [Blog] &lt;em&gt;Stack abuse&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="javascript" /></entry><entry><title type="html">Writing pipes and filters to query data</title><link href="https://kosalanuwan.github.io/journal/entity-framework/pipes-and-filters/" rel="alternate" type="text/html" title="Writing pipes and filters to query data" /><published>2009-11-05T00:00:00+00:00</published><updated>2009-11-05T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/entity-framework/pipes-and-filters</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/entity-framework/pipes-and-filters/">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/linq/linq-in-csharp&quot;&gt;LINQ&lt;/a&gt; may look like the best thing every happend to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEnumerable&amp;lt;&amp;gt;&lt;/code&gt; types but it’s getting  all kinds of help from our friends at C#. For the record, it’s the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods&quot;&gt;Extension Methods&lt;/a&gt; that enabled &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#lambdas-with-the-standard-query-operators&quot;&gt;query functionality&lt;/a&gt; without creating new derived types or modifying original types of enumerables.&lt;/p&gt;

&lt;p&gt;I like the idea of writing data access queries as extension methods. It gives the whole thing a very &lt;em&gt;Ubiquitous&lt;/em&gt; feel since the LINQ queries are more readable, say, two months from now like &lt;a href=&quot;https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29&quot;&gt;Uncle Bob say on Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example &lt;sup&gt;1&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Use of typical LINQ expressions.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;example-2&quot;&gt;Example &lt;sup&gt;2&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Or, use of user-defined fluent queries.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing we are going to need is reusable &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#lambdas-with-the-standard-query-operators&quot;&gt;Lambda expressions&lt;/a&gt;. It’s slightly obnoxious that extension methods require non-nested non-generic static classes. I’m gonna go ahead and say there’s no use of instance methods syntex. I can &lt;a href=&quot;https://sourcemaking.com/refactoring/consolidate-conditional-expression&quot;&gt;consolidate&lt;/a&gt; query expressions into static methods so a little &lt;a href=&quot;https://sourcemaking.com/refactoring/extract-class&quot;&gt;extract method&lt;/a&gt; magic is all that is necessary to get started. Excellent.&lt;/p&gt;

&lt;h4 id=&quot;example-3&quot;&gt;Example &lt;sup&gt;3&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Use of typical LINQ expressions for querying data.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Discontinued&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SupplierId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplierId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OrderBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModifiedDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;example-4&quot;&gt;Example &lt;sup&gt;4&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Or, use user-defined fluent queries as extension methods.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ForSupplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supplierId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TopTrending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next is &lt;a href=&quot;https://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IQueryable&amp;lt;&amp;gt;&lt;/code&gt; types. Not only it allows chaining methods, but you also have to adhere to a &lt;a href=&quot;https://martinfowler.com/bliki/DomainSpecificLanguage.html&quot;&gt;domain-specific language&lt;/a&gt; to describe methods. I can pass in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IQueryable&amp;lt;&amp;gt;&lt;/code&gt; domain entity type as the first parameter which the method must operate on. All I have to do is add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; modifier to the parameter and the C# compiler will do the rest for me. I’m not going to lie, you’d be amazed how tricky it is and if you return the wrong type, chaining breaks and nothing returns.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kosalanuwan/vscode-remote-try-webapi/#readme&quot;&gt;Have a look at the web-api example&lt;/a&gt; to see how I use fluent data access queries with pipes and fiters.&lt;/p&gt;</content><author><name></name></author><category term="entity-framework" /></entry><entry><title type="html">Hello world :wave:</title><link href="https://kosalanuwan.github.io/journal/personal-notes/hello-world/" rel="alternate" type="text/html" title="Hello world :wave:" /><published>1991-07-17T00:00:00+00:00</published><updated>1991-07-17T00:00:00+00:00</updated><id>https://kosalanuwan.github.io/journal/personal-notes/hello-world</id><content type="html" xml:base="https://kosalanuwan.github.io/journal/personal-notes/hello-world/">&lt;p&gt;GitHub used to be my unicorn and now it is &lt;strong&gt;&lt;em&gt;my bitch&lt;/em&gt;&lt;/strong&gt;. I interact with GitHub daily, so why not use it for live journal? It makes more sense, at least for me. I’m that nerd :nerd_face:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kosalanuwan&quot;&gt;&lt;img src=&quot;http://ghchart.rshah.org/BF0000/kosalanuwan&quot; alt=&quot;Kosala Nuwan's GitHub contributions&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The truth is I have tried out all those widespread of notes taking apps from Evernote to Onenote, Workflowy, Trello, Todoist, and even Notion. For the record they all seemed great but this is just my personal preference.&lt;/p&gt;

&lt;p&gt;In case you were wondeirng, this entire site is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Originally, a flavor of &lt;a href=&quot;https://github.com/kosalanuwan/gh-site-otto-theme/#readme&quot;&gt;the Otto theme&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Built and published with &lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot;&gt;GitHub Pages Actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hosted on &lt;a href=&quot;https://github.com/kosalanuwan/journal&quot;&gt;GitHub Pages&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;Developed with &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; using &lt;a href=&quot;https://github.com/kosalanuwan/devcontainers&quot;&gt;developer container for Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, this article amongst rest are written in &lt;a href=&quot;https://&quot;&gt;Markdown&lt;/a&gt; with &lt;a href=&quot;https://&quot;&gt;Paper app&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="personal-notes" /></entry></feed>